grammar Lupin::Parser::Lua  
  rule lua
    chunk
  end
  
  rule chunk
    list:statement* { matches.map {|stat| stat.value} }
  end
  
  rule statement
    (WS?
     stat:( functioncall
          )
     WS? ';'?
    ) { stat.value }
  end
  
  ####
  ## Expressions (Operators & Precedence)
  #
  # ()
  # ^
  # not -(unary)
  # * /
  # + -
  # ..
  # < > <= >= ~= ==
  # and
  # or
  #
  ##
  ####
  
  rule explist
    (item:expression
     list:(WS? ',' WS? item:expression)*
    ) <Lupin::Parser::List>
  end
  
  rule expression
    or_expr
  end
  
  rule or_expr
    (lhs:and_expr
     list:(WS? op:(/\bor\b/) { Lupin::AST::OrComp }
           WS? rhs:and_expr
          )*
    ) <Lupin::Parser::LeftAssoc>
  end
  
  rule and_expr
    (lhs:eql_expr
     list:(WS? op:(/\band\b/) { Lupin::AST::AndComp }
           WS? rhs:eql_expr
          )*
    ) <Lupin::Parser::LeftAssoc>
  end
  
  rule eql_expr
    (lhs:concat_expr
     list:(WS? op:( '==' { Lupin::AST::Equal }
                  | '~=' { Lupin::AST::NotEqual }
                  | '<=' { Lupin::AST::AtMost }
                  | '>=' { Lupin::AST::AtLeast }
                  | '<' { Lupin::AST::LessThan }
                  | '>' { Lupin::AST::MoreThan }
                  )
           WS? rhs:concat_expr
          )*
    ) <Lupin::Parser::LeftAssoc>
  end
  
  rule concat_expr
    (list:(lhs:add_expr
           WS? op:('..') { Lupin::AST::Concatenate }
           WS?
          )*
     rhs:add_expr
    ) <Lupin::Parser::RightAssoc>
  end
  
  rule add_expr
    (lhs:mul_expr
     list:(WS? op:( '+' { Lupin::AST::Addition }
                  | '-' { Lupin::AST::Subtraction }
                  )
           WS? rhs:mul_expr
          )*
    ) <Lupin::Parser::LeftAssoc>
  end
  
  rule mul_expr
    (lhs:not_expr
     list:(WS? op:( '*' { Lupin::AST::Multiplication }
                  | '/' { Lupin::AST::Division }
                  | '%' { Lupin::AST::Modulo }
                  )
           WS? rhs:not_expr
          )*
    ) <Lupin::Parser::LeftAssoc>
  end
  
  rule not_expr
    (list:(WS? op:( /\bnot\b/ { Lupin::AST::Negation }
                  | '-' { Lupin::AST::UnaryMinus }
                  | '#' { Lupin::AST::Length }
                  )
           WS?
          )*
     rhs:pow_expr
    ) <Lupin::Parser::Unary>
  end
  
  rule pow_expr
    (list:(lhs:basic_expr
           op:(WS? '^' WS?) { Lupin::AST::Power }
          )*
     rhs:basic_expr
    ) <Lupin::Parser::RightAssoc>
  end
  
  rule basic_expr
    ( primitive
    | functioncall
    | indexer
    | value_expr
    )
  end
  
  rule value_expr
    ( ('(' WS? expression WS? ')') { expression.value }
  # | variable
    )
  end
  
  rule indexer
    ( var:value_expr
      args:( (WS? '[' WS? expression WS? ']') { expression.value }
           | (WS? '.' WS? identifier) { identifier.value }
           )+
    ) {
      t = var.value
      args.matches.each {|a| t = Lupin::AST::TableGet.new(t, a.value)}
      t
    }
  end
  
  rule functioncall
    ( var:value_expr
      args:( (WS? '(' WS? explist WS? ')') { explist.value }
           | (WS? '(' WS? ')') { [] }
           | (WS? table) { [table] }
           | (WS? string) { [string] }
           )+
    ) {
      f = var.value
      args.matches.each {|a| f = Lupin::AST::FunctionCall.new(f, a.value)}
      f
    }
  end
  
  rule variable
    (identifier)
  end
  
  rule identifier
    /[A-Za-z_][A-Za-z_0-9]*/ { Lupin::AST::String.new(to_s) }
  end
  
  ####
  ## Basic data types
  ####
  rule primitive
    ( table
    | number
    | string
    | boolean
    | nil
    )
  end
  
  ### Table
  rule table
    ('{' WS? list:(fieldlist|'') WS? '}') <Lupin::Parser::TableLiteral>
  end
  
  rule fieldlist
    (item:field
     list:(WS? fieldsep WS? item:field)*
     WS? fieldsep?
    ) <Lupin::Parser::List>
  end
  
  rule field
    ( '[' WS? k:expression WS? ']' WS? '=' WS? v:expression
    | k:identifier WS? '=' WS? v:expression
    | k:'' v:expression
    ) <Lupin::Parser::Pair>
  end
  
  rule fieldsep
    /;|,/
  end
  
  ### Number
  rule number
    ( /0x[A-Fa-f0-9]+/ <Lupin::Parser::HexLiteral>
    | (base exponent:(exponent|'')) <Lupin::Parser::DecimalLiteral>
    )
  end
  
  rule base
    /\d*\.\d+|\d+\.?/ { to_f }
  end
  
  rule exponent
    ([Ee] e:/[+-]?\d+/) { e.to_i }
  end  
  
  ### String
  rule string
    ( ("\"" str:/(\\.|[^\"\n])*/m "\"") <Lupin::Parser::StringLiteral>
    | ('\'' str:/(\\.|[^\'\n])*/m '\'') <Lupin::Parser::StringLiteral>
    | str: /\[(=*)\[.*?\]\1\]/m <Lupin::Parser::LongStringLiteral>
    )
  end
 
  ### Boolean
  rule boolean
    ( 'true' { Lupin::AST::True }
    | 'false' { Lupin::AST::False }
    )
  end
  
  ### Nil
  rule nil
    'nil' { Lupin::AST::Nil }
  end
  
  ### Whitespace and comments
  rule WS
    /\b/? (/[ \n\t]+/ | comment)+ /\b/?
  end
  
  rule comment
    "--" (/\[(=*)\[.*?\]\1\]/ | /.*\n/)
  end
end
