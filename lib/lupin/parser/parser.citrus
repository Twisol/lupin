grammar Lupin::Parser
  rule lua
    chunk
  end
  
  rule chunk
    list:stat* { matches.map(&:value) }
  end
  
  rule statement
    (expression WS? ';'?) {
      expression.value
    }
  end
  
  # TODO: Implement operator precedence
  rule expression
    ( (lhs:primitive WS? op:bin_op WS? rhs:expression) { op.value.new(lhs.value, rhs.value) }
    | (op:un_op WS? expression) { un_op.value.new(expression.value) }
    | primitive
    )
  end
  
  rule un_op
    ( '-' { Lupin::AST::UnaryMinus }
    | (WS 'not' WS) { Lupin::AST::Negation }
    )
  end
  
  rule bin_op
    ( '+' { Lupin::AST::Addition }
    | '-' { Lupin::AST::Subtraction }
    | '*' { Lupin::AST::Multiplication }
    | '/' { Lupin::AST::Division }
    )
  end
  
  rule primitive
    ( table
    | number
    | string
    | 'nil' { Lupin::AST::Nil.new }
    | 'false' { Lupin::AST::False.new }
    | 'true' { Lupin::AST::True.new }
    )
  end
  
  rule table
    ( ('{' WS? list:fieldlist WS? '}') { Lupin::AST::Table.new(list.value) }
    | ('{' WS? '}') { Lupin::AST::Table.new() }
    )
  end
  
  rule fieldlist
    (f:field
     list:(WS? fieldsep WS? f:field)*
     WS? fieldsep?
    ) {
      [self].concat(list.matches).map {|m| m.f.value}
    }
  end
  
  rule field
    ( ('[' WS? k:expression WS? ']' WS? '=' WS? v:expression)
        { Lupin::AST::Field.new(k.value, v.value) }
    | (exp:expression '')
        { Lupin::AST::Field.new(nil, exp.value) }
    )
  end
  
  rule fieldsep
    ';' | ','
  end
  
  rule identifier
    /[A-Za-z_][A-Za-z0-9]*/ { Lupin::AST::String.new(to_s) }
  end
  
  rule number
    (base:/\d*\.\d+|\d+\.?/ { to_f }
     e:exponent? { matches.length > 0 ? exponent.value : 0 }
    ) { Lupin::AST::Number.new(base.value, e.value) }
  end
  
  rule exponent
    ([Ee] e:/[+-]?\d+/) { e.to_i }
  end  
  
  rule string
    ( ("\"" s:/(\\(?:['"abfnrtv\n\r]|\d{1,3})|[^"\n])*/ "\"") { Lupin::AST::String.new(s.value) }
    | ("\'" s:/(\\(?:['"abfnrtv\n\r]|\d{1,3})|[^'\n])*/ "\'") { Lupin::AST::String.new(s.value) }
    | /\[(=*)\[.*?\]\1\]/m { Lupin::AST::LongString.new(match(/\[(=*)\[(.*?)\]\1\]/m)[2]) }
    )
  end
  #'#
  
  rule WS
    (/[ \n\t]+/ | comment)+ { nil }
  end
  
  rule comment
    "--" (/\[(=*)\[.*?\]\1\]/ | /.*\n/)
  end
end
